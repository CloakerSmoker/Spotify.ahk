{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Getting started with Spotify.ahk To download or get the latist version, visit the Spotify.ahk Github page . Requirements Autohotkey_L - Which can be found here Spotify Premium - While not required for all functionality, some things might require a premium account (which will be noted on a per-page basis) Theorically, nothing else. All libraries Spotify.ahk requires are packaged with the download Click this link to go to the rewrite docs","title":"Home"},{"location":"index.html#getting-started-with-spotifyahk","text":"To download or get the latist version, visit the Spotify.ahk Github page .","title":"Getting started with Spotify.ahk"},{"location":"index.html#requirements","text":"Autohotkey_L - Which can be found here Spotify Premium - While not required for all functionality, some things might require a premium account (which will be noted on a per-page basis) Theorically, nothing else. All libraries Spotify.ahk requires are packaged with the download","title":"Requirements"},{"location":"index.html#click-this-link-to-go-to-the-rewrite-docs","text":"","title":"Click this link to go to the rewrite docs"},{"location":"about.html","text":"About Spotify.ahk Spotify.ahk is a (hopefully) fully featured wrapper for the Spotify API which aims to allow complete automation of Spotify","title":"About"},{"location":"about.html#about-spotifyahk","text":"Spotify.ahk is a (hopefully) fully featured wrapper for the Spotify API which aims to allow complete automation of Spotify","title":"About Spotify.ahk"},{"location":"rewrite-docs/index.html","text":"Getting started with Spotify.ahk To download or get the latist version, visit the Spotify.ahk Github page . Requirements Autohotkey_L - Which can be found here Spotify Premium - While not required for all functionality, some things might require a premium account (which will be noted on a per-page basis) Theorically, nothing else. All libraries Spotify.ahk requires are packaged with the download Click this link to go to the legacy docs","title":"Home"},{"location":"rewrite-docs/index.html#getting-started-with-spotifyahk","text":"To download or get the latist version, visit the Spotify.ahk Github page .","title":"Getting started with Spotify.ahk"},{"location":"rewrite-docs/index.html#requirements","text":"Autohotkey_L - Which can be found here Spotify Premium - While not required for all functionality, some things might require a premium account (which will be noted on a per-page basis) Theorically, nothing else. All libraries Spotify.ahk requires are packaged with the download","title":"Requirements"},{"location":"rewrite-docs/index.html#click-this-link-to-go-to-the-legacy-docs","text":"","title":"Click this link to go to the legacy docs"},{"location":"rewrite-docs/albums/album-object.html","text":"Album Objects Wrap around this Spotify API object model. Note Album objects should only be created with .Albums.GetAlbums() unless they are returned by, or included in other objects. Properties Key Value description genres A string array of genres that fit the album id The Spotify ID of the album name The name of the album uri The Spotify URI of the album artists An array of Artist Objects that represents the Artist(s) of the album images An array of Spotify Image Objects tracks An array of Track Objects inside the album Methods Definition Description .Save() Saves an album to the current user's Your Music library .UnSave() Removes a saved album from the current user's Your Music library .Play() Tries to start playing the album on the active device, will cancel any other playback","title":"Album Objects"},{"location":"rewrite-docs/albums/album-object.html#album-objects","text":"Wrap around this Spotify API object model.","title":"Album Objects"},{"location":"rewrite-docs/albums/album-object.html#note","text":"Album objects should only be created with .Albums.GetAlbums() unless they are returned by, or included in other objects.","title":"Note"},{"location":"rewrite-docs/albums/album-object.html#properties","text":"Key Value description genres A string array of genres that fit the album id The Spotify ID of the album name The name of the album uri The Spotify URI of the album artists An array of Artist Objects that represents the Artist(s) of the album images An array of Spotify Image Objects tracks An array of Track Objects inside the album","title":"Properties"},{"location":"rewrite-docs/albums/album-object.html#methods","text":"Definition Description .Save() Saves an album to the current user's Your Music library .UnSave() Removes a saved album from the current user's Your Music library .Play() Tries to start playing the album on the active device, will cancel any other playback","title":"Methods"},{"location":"rewrite-docs/albums/get-album.html","text":"Getting An Album By ID Wraps around this Spotify API endpoint How to use After creating a Spotify object, you can use .Albums.GetAlbum() to get a album by its Spotify ID . This will return an Album Object which can then be used for the methods outlined on this page. Example This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get a album with .Albums.GetAlbum() by the album's Spotify ID C) Save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save()","title":"Get An Album By ID"},{"location":"rewrite-docs/albums/get-album.html#getting-an-album-by-id","text":"Wraps around this Spotify API endpoint","title":"Getting An Album By ID"},{"location":"rewrite-docs/albums/get-album.html#how-to-use","text":"After creating a Spotify object, you can use .Albums.GetAlbum() to get a album by its Spotify ID . This will return an Album Object which can then be used for the methods outlined on this page.","title":"How to use"},{"location":"rewrite-docs/albums/get-album.html#example","text":"This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get a album with .Albums.GetAlbum() by the album's Spotify ID C) Save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save()","title":"Example"},{"location":"rewrite-docs/albums/play-album.html","text":"Playing An Album Wraps around this Spotify API endpoint Warning This method requires Spotify Premium, and will NOT work without Spotify Premium (see here ) Note If an active device is not found, an error about the response status code not being 2xx will be thrown. How to use After creating a Spotify object, and getting an album through either .Albums.GetAlbum() or any other function/object which contains/returns album objects, the .Play() method of the returned album object can be used. .Play() will start playing the album on the active device. Example This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get an album with .Albums.GetAlbum() by the album's Spotify ID C) Play the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Play()","title":"Play An Album"},{"location":"rewrite-docs/albums/play-album.html#playing-an-album","text":"Wraps around this Spotify API endpoint","title":"Playing An Album"},{"location":"rewrite-docs/albums/play-album.html#warning","text":"","title":"Warning"},{"location":"rewrite-docs/albums/play-album.html#this-method-requires-spotify-premium-and-will-not-work-without-spotify-premium-see-here","text":"","title":"This method requires Spotify Premium, and will NOT work without Spotify Premium (see here)"},{"location":"rewrite-docs/albums/play-album.html#note","text":"If an active device is not found, an error about the response status code not being 2xx will be thrown.","title":"Note"},{"location":"rewrite-docs/albums/play-album.html#how-to-use","text":"After creating a Spotify object, and getting an album through either .Albums.GetAlbum() or any other function/object which contains/returns album objects, the .Play() method of the returned album object can be used. .Play() will start playing the album on the active device.","title":"How to use"},{"location":"rewrite-docs/albums/play-album.html#example","text":"This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get an album with .Albums.GetAlbum() by the album's Spotify ID C) Play the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Play()","title":"Example"},{"location":"rewrite-docs/albums/save-album.html","text":"Saving An Album Wraps around this Spotify API endpoint How to use After creating a Spotify object, and getting an album through either .Albums.GetAlbum() or any other function/object which contains/returns album objects, the .Save() method of the album object can be used. .Save() expects no parameters and will save an album to the current user's Your Music library. Example This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get a track with .Albums.GetAlbum() by the album's Spotify ID C) Save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save()","title":"Save An Album"},{"location":"rewrite-docs/albums/save-album.html#saving-an-album","text":"Wraps around this Spotify API endpoint","title":"Saving An Album"},{"location":"rewrite-docs/albums/save-album.html#how-to-use","text":"After creating a Spotify object, and getting an album through either .Albums.GetAlbum() or any other function/object which contains/returns album objects, the .Save() method of the album object can be used. .Save() expects no parameters and will save an album to the current user's Your Music library.","title":"How to use"},{"location":"rewrite-docs/albums/save-album.html#example","text":"This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get a track with .Albums.GetAlbum() by the album's Spotify ID C) Save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save()","title":"Example"},{"location":"rewrite-docs/albums/unsave-album.html","text":"Un-Saving An Album Wraps around this Spotify API endpoint How to use After creating a Spotify object, and getting a album through either .Albums.GetAlbumk() or any other function/object which contains/returns album objects, the .UnSave() method of the album object can be used. .UnSave() expects no parameters and will remove a album from the current user's Your Music library. Example This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get an album with .Albums.GetAlbum() by the album's Spotify ID C) Save the album D) Wait 20 seconds, then un-save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save() Sleep, 20000 GoodAlbumIMO.UnSave()","title":"Un-Save An Album"},{"location":"rewrite-docs/albums/unsave-album.html#un-saving-an-album","text":"Wraps around this Spotify API endpoint","title":"Un-Saving An Album"},{"location":"rewrite-docs/albums/unsave-album.html#how-to-use","text":"After creating a Spotify object, and getting a album through either .Albums.GetAlbumk() or any other function/object which contains/returns album objects, the .UnSave() method of the album object can be used. .UnSave() expects no parameters and will remove a album from the current user's Your Music library.","title":"How to use"},{"location":"rewrite-docs/albums/unsave-album.html#example","text":"This example will: A) Create a Spotify object (which will prompt the user for authorization if it is not already done) B) Get an album with .Albums.GetAlbum() by the album's Spotify ID C) Save the album D) Wait 20 seconds, then un-save the album Spoofy := new Spotify() GoodAlbumIMO := Spoofy.Albums.GetAlbum(\"7xuWUPvk8Xb042QUigdIrE\") GoodAlbumIMO.Save() Sleep, 20000 GoodAlbumIMO.UnSave()","title":"Example"},{"location":"rewrite-docs/examples/examples.html","text":"Hotkeys to save/un-save the currently playing track F1::Spotify.Player.SaveCurrentlyPlaying() ; Alias for Spotify.Player.GetCurrentPlaybackInfo().Track.Save() F2::Spotify.Player.UnSaveCurrentlyPlaying() ; Alias for Spotify.Player.GetCurrentPlaybackInfo().Track.UnSave() Hotkey to play a random album from the user's top artists TopArtists := Spotify.CurrentUser.GetTop(\"artists\") ; Returns an array of top artists TopArtistsAlbums := TopArtists[1].Albums ; Returns an array of number 1 top artist's ablums Random, Rand, 1, % TopArtistsAlbums.Length() ; Gets a random number 1 - Artist's number of ablums TopArtistsAlbums[Rand].Play() ; Plays the random album","title":"Misc Examples"},{"location":"rewrite-docs/examples/examples.html#hotkeys-to-saveun-save-the-currently-playing-track","text":"F1::Spotify.Player.SaveCurrentlyPlaying() ; Alias for Spotify.Player.GetCurrentPlaybackInfo().Track.Save() F2::Spotify.Player.UnSaveCurrentlyPlaying() ; Alias for Spotify.Player.GetCurrentPlaybackInfo().Track.UnSave()","title":"Hotkeys to save/un-save the currently playing track"},{"location":"rewrite-docs/examples/examples.html#hotkey-to-play-a-random-album-from-the-users-top-artists","text":"TopArtists := Spotify.CurrentUser.GetTop(\"artists\") ; Returns an array of top artists TopArtistsAlbums := TopArtists[1].Albums ; Returns an array of number 1 top artist's ablums Random, Rand, 1, % TopArtistsAlbums.Length() ; Gets a random number 1 - Artist's number of ablums TopArtistsAlbums[Rand].Play() ; Plays the random album","title":"Hotkey to play a random album from the user's top artists"},{"location":"rewrite-docs/player/get-current-info.html","text":"Getting Current Playback Info Wraps around this (and this one, since I can't link two at once) Spotify API endpoint How to use The methods Spotify.Player.GetCurrentPlaybackInfo() and Spotify.Player.GetFullPlaybackInfo() both return info about playback, however, Spotify.Player.GetCurrentPlaybackInfo() does not return the device that playback is taking play on, so you can NOT get the playback volume without calling Spotify.Player.GetFullPlaybackInfo() . Example This example will: A) Get the current playback info with Spotify.Player.GetCurrentPlaybackInfo() B) Show how many seconds into the song the player is, and the name property of the currently playing track CurrentPlayback := Spotify.Player.GetCurrentPlaybackInfo() MsgBox, % \"You are currently \" Ceil(CurrentPlayback.progress_ms / 1000) \" seconds into the song \"\"\" CurrentPlayback.Track.Name \"\"\"\"","title":"Get Info About Current Playback"},{"location":"rewrite-docs/player/get-current-info.html#getting-current-playback-info","text":"Wraps around this (and this one, since I can't link two at once) Spotify API endpoint","title":"Getting Current Playback Info"},{"location":"rewrite-docs/player/get-current-info.html#how-to-use","text":"The methods Spotify.Player.GetCurrentPlaybackInfo() and Spotify.Player.GetFullPlaybackInfo() both return info about playback, however, Spotify.Player.GetCurrentPlaybackInfo() does not return the device that playback is taking play on, so you can NOT get the playback volume without calling Spotify.Player.GetFullPlaybackInfo() .","title":"How to use"},{"location":"rewrite-docs/player/get-current-info.html#example","text":"This example will: A) Get the current playback info with Spotify.Player.GetCurrentPlaybackInfo() B) Show how many seconds into the song the player is, and the name property of the currently playing track CurrentPlayback := Spotify.Player.GetCurrentPlaybackInfo() MsgBox, % \"You are currently \" Ceil(CurrentPlayback.progress_ms / 1000) \" seconds into the song \"\"\" CurrentPlayback.Track.Name \"\"\"\"","title":"Example"},{"location":"rewrite-docs/player/set-volume.html","text":"Setting Playback Volume Wraps around this Spotify API endpoint Warning This method requires Spotify Premium, and will NOT work without Spotify Premium (see here ) Note The API endpoint called by this method is in beta, and might not work perfectly How To Use Spotify.Player.SetVolume() expects one parameter, volume (A number 0-100 representing the volume percentage you want) and will try to set the playback volume on the currently active device to the passed percentage Example This example will: A) Call Spotify.Player.GetFullPlaybackInfo() and store the current volume percent B) Increment the current volume percentage by 10 C) Set the volume percentage to the new percentage CurrentVolume := Spoofy.Player.GetFullPlaybackInfo().Device.volume_percent CurrentVolume += 10 Spoofy.Player.SetVolume(CurrentVolume)","title":"Set Playback Volume"},{"location":"rewrite-docs/player/set-volume.html#setting-playback-volume","text":"Wraps around this Spotify API endpoint","title":"Setting Playback Volume"},{"location":"rewrite-docs/player/set-volume.html#warning","text":"","title":"Warning"},{"location":"rewrite-docs/player/set-volume.html#this-method-requires-spotify-premium-and-will-not-work-without-spotify-premium-see-here","text":"","title":"This method requires Spotify Premium, and will NOT work without Spotify Premium (see here)"},{"location":"rewrite-docs/player/set-volume.html#note","text":"The API endpoint called by this method is in beta, and might not work perfectly","title":"Note"},{"location":"rewrite-docs/player/set-volume.html#how-to-use","text":"Spotify.Player.SetVolume() expects one parameter, volume (A number 0-100 representing the volume percentage you want) and will try to set the playback volume on the currently active device to the passed percentage","title":"How To Use"},{"location":"rewrite-docs/player/set-volume.html#example","text":"This example will: A) Call Spotify.Player.GetFullPlaybackInfo() and store the current volume percent B) Increment the current volume percentage by 10 C) Set the volume percentage to the new percentage CurrentVolume := Spoofy.Player.GetFullPlaybackInfo().Device.volume_percent CurrentVolume += 10 Spoofy.Player.SetVolume(CurrentVolume)","title":"Example"},{"location":"rewrite-docs/player/static-player.html","text":"The Spotify.Player static class Does not wrap around any specific API object/endpoint. Instead, the Spotify.Player class provides methods that accept raw Spotify IDs and call their web API versions, alongside functions that wrap around Spotify Player API endpoints. Note This class is 100% static, and new Spotify.Player() will never be valid, and is very likely to break things. Methods Method Name Parameters Return value Description SaveCurrentlyPlaying None None Gets the currently playing track, and saves it to your Liked Songs UnSaveCurrentlyPlaying None None Gets the currenty playing track, and removes it from your Liked Songs SetVolume Volume (0-100) None Sets the playback volume on the current device to the number passed, clamped to 0-100 GetCurrentPlaybackInfo None A Currently Playing Object Returns info about what's currently playing (This DOES NOT include the device playback is happening on) GetFullPlaybackInfo None A Currently Playing Context Object Returns even more info about current playback, including the device that playback is happening on GetCurrentTrack None A track object Returns just the currently playing track, with no extra info. GetDeviceList None An array of device objects Returns a list of all devices available for playback. GetRecentlyPlayed None An array of play history objects Returns a list of tracks, and context that have been recently played SeekTime TimeInMS None Seeks playback on the active device to the given time in MS SetRepeatMode NewMode None Takes either Track , Context or Off , and sets the currently active player's repeat mode to that value (Context = on, but without the little 1 on the repeat button) SetShuffle NewMode None Takes a true or false value, and sets shuffle on for true, and off for false. NextTrack None None Skips to the next track. PrevTrack None None Skips back a track. PausePlayback None None Pauses playback on the active device. ResumePlayback None None Resumes playback on the active device. PlayPause None None Toggles playback being from being paused to resumed, and from resumed to paused SwitchToDevice DeviceID None Takes the ID of a device , and switches playback to the device with the given ID. SwitchToContext ContextType , ContextID None Takes the type, and ID of a context (a playlist/album/artist), and plays that context on the active device. PlayTrack TrackID None Takes a track ID, and plays the track with that ID on the active device. PlayPlaylist PlaylistID None Takes a playlist ID, and plays the playlist with that ID on the active device. PlayAlbum AlbumID None Takes a album ID, and plays the album with that ID on the active device.","title":"The `Spotify.Player` static class"},{"location":"rewrite-docs/player/static-player.html#the-spotifyplayer-static-class","text":"Does not wrap around any specific API object/endpoint. Instead, the Spotify.Player class provides methods that accept raw Spotify IDs and call their web API versions, alongside functions that wrap around Spotify Player API endpoints.","title":"The Spotify.Player static class"},{"location":"rewrite-docs/player/static-player.html#note","text":"This class is 100% static, and new Spotify.Player() will never be valid, and is very likely to break things.","title":"Note"},{"location":"rewrite-docs/player/static-player.html#methods","text":"Method Name Parameters Return value Description SaveCurrentlyPlaying None None Gets the currently playing track, and saves it to your Liked Songs UnSaveCurrentlyPlaying None None Gets the currenty playing track, and removes it from your Liked Songs SetVolume Volume (0-100) None Sets the playback volume on the current device to the number passed, clamped to 0-100 GetCurrentPlaybackInfo None A Currently Playing Object Returns info about what's currently playing (This DOES NOT include the device playback is happening on) GetFullPlaybackInfo None A Currently Playing Context Object Returns even more info about current playback, including the device that playback is happening on GetCurrentTrack None A track object Returns just the currently playing track, with no extra info. GetDeviceList None An array of device objects Returns a list of all devices available for playback. GetRecentlyPlayed None An array of play history objects Returns a list of tracks, and context that have been recently played SeekTime TimeInMS None Seeks playback on the active device to the given time in MS SetRepeatMode NewMode None Takes either Track , Context or Off , and sets the currently active player's repeat mode to that value (Context = on, but without the little 1 on the repeat button) SetShuffle NewMode None Takes a true or false value, and sets shuffle on for true, and off for false. NextTrack None None Skips to the next track. PrevTrack None None Skips back a track. PausePlayback None None Pauses playback on the active device. ResumePlayback None None Resumes playback on the active device. PlayPause None None Toggles playback being from being paused to resumed, and from resumed to paused SwitchToDevice DeviceID None Takes the ID of a device , and switches playback to the device with the given ID. SwitchToContext ContextType , ContextID None Takes the type, and ID of a context (a playlist/album/artist), and plays that context on the active device. PlayTrack TrackID None Takes a track ID, and plays the track with that ID on the active device. PlayPlaylist PlaylistID None Takes a playlist ID, and plays the playlist with that ID on the active device. PlayAlbum AlbumID None Takes a album ID, and plays the album with that ID on the active device.","title":"Methods"},{"location":"rewrite-docs/playlists/add-tracks.html","text":"Adding Tracks To A Playlist Wraps around this Spotify API endpoint How to use After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() , the .AddTrack() method of the returned playlist object can be used. .AddTrack() expects one parameter, TrackObject , which must be a track object . For adding a track to a playlist by ID, see the bottom example. Example This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play() An alternative way to do this without getting a full track object is the Spotify.Playlists.PlaylistAddTrack() method, which takes a playlist ID and track ID, which would save us one web API call. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.Play()","title":"Add Tracks To A Playlist"},{"location":"rewrite-docs/playlists/add-tracks.html#adding-tracks-to-a-playlist","text":"Wraps around this Spotify API endpoint","title":"Adding Tracks To A Playlist"},{"location":"rewrite-docs/playlists/add-tracks.html#how-to-use","text":"After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() , the .AddTrack() method of the returned playlist object can be used. .AddTrack() expects one parameter, TrackObject , which must be a track object . For adding a track to a playlist by ID, see the bottom example.","title":"How to use"},{"location":"rewrite-docs/playlists/add-tracks.html#example","text":"This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play() An alternative way to do this without getting a full track object is the Spotify.Playlists.PlaylistAddTrack() method, which takes a playlist ID and track ID, which would save us one web API call. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.Play()","title":"Example"},{"location":"rewrite-docs/playlists/create.html","text":"Creating A Playlist Wraps around this Spotify API endpoint How to use Spotify.Playlists.CreatePlaylist() , expects three parameters, name (this name you want the new playlist to have), public (if you want the playlist to be public or not) and description (the description you want the new playlist to have) This will return a new playlist object owned by the user Spotify.ahk is running as. The new playlist object can then be used to add tracks to the playlist you created or can be played . Example This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device Spoofy := new Spotify() NewPlaylist := Spoofy.Playlists.CreatePlaylist(\"Test 123\", \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play()","title":"Create A Playlist"},{"location":"rewrite-docs/playlists/create.html#creating-a-playlist","text":"Wraps around this Spotify API endpoint","title":"Creating A Playlist"},{"location":"rewrite-docs/playlists/create.html#how-to-use","text":"Spotify.Playlists.CreatePlaylist() , expects three parameters, name (this name you want the new playlist to have), public (if you want the playlist to be public or not) and description (the description you want the new playlist to have) This will return a new playlist object owned by the user Spotify.ahk is running as. The new playlist object can then be used to add tracks to the playlist you created or can be played .","title":"How to use"},{"location":"rewrite-docs/playlists/create.html#example","text":"This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device Spoofy := new Spotify() NewPlaylist := Spoofy.Playlists.CreatePlaylist(\"Test 123\", \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play()","title":"Example"},{"location":"rewrite-docs/playlists/delete-playlist.html","text":"Deleting A Playlist Wraps around this Spotify API endpoint Note It is not currently possible to delete a playlist entirely on Spotify, the best alternative is to unfollow it, which is the same as \"deleting\" a playlist through the web players or desktop app. Because of this, this method just unfollows a playlist. How to use After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() , the .Delete() method of the playlist object can be called to \"delete\" the playlist. Example This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get 3 track objects with calls to Spotify.Tracks.GetTrack() . C) Add 5 tracks to the playlist, 3 copies of Ocean Man and the two other tracks, all using the .AddTrack() method . D) Wait 20 seconds, then delete the playlist NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") FirstTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") SecondTrack := Spotify.Tracks.GetTrack(\"2yYSMsrFJ6m7ePtLxQZZBF\") OceanMan := Spotify.Tracks.GetTrack(\"6M14BiCN00nOsba4JaYsHW\") NewPlaylist.AddTrack(FirstTrack) NewPlaylist.AddTrack(SecondTrack) loop, 3 { NewPlaylist.AddTrack(OceanMan) } Sleep, 20000 NewPlaylist.Delete() An alternative way to do this without getting any full track objects is the Spotify.Playlists.PlaylistAddTrack() method and the Spotify.Playlists.DeletePlaylist() method, which both a playlist ID and track ID, which would save us some web API calls. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"2yYSMsrFJ6m7ePtLxQZZBF\") loop, 3 { Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\") } Sleep, 20000 Spotify.Playlists.DeletePlaylist(NewPlaylist.ID)","title":"Delete A Playlist"},{"location":"rewrite-docs/playlists/delete-playlist.html#deleting-a-playlist","text":"Wraps around this Spotify API endpoint","title":"Deleting A Playlist"},{"location":"rewrite-docs/playlists/delete-playlist.html#note","text":"It is not currently possible to delete a playlist entirely on Spotify, the best alternative is to unfollow it, which is the same as \"deleting\" a playlist through the web players or desktop app. Because of this, this method just unfollows a playlist.","title":"Note"},{"location":"rewrite-docs/playlists/delete-playlist.html#how-to-use","text":"After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() , the .Delete() method of the playlist object can be called to \"delete\" the playlist.","title":"How to use"},{"location":"rewrite-docs/playlists/delete-playlist.html#example","text":"This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get 3 track objects with calls to Spotify.Tracks.GetTrack() . C) Add 5 tracks to the playlist, 3 copies of Ocean Man and the two other tracks, all using the .AddTrack() method . D) Wait 20 seconds, then delete the playlist NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") FirstTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") SecondTrack := Spotify.Tracks.GetTrack(\"2yYSMsrFJ6m7ePtLxQZZBF\") OceanMan := Spotify.Tracks.GetTrack(\"6M14BiCN00nOsba4JaYsHW\") NewPlaylist.AddTrack(FirstTrack) NewPlaylist.AddTrack(SecondTrack) loop, 3 { NewPlaylist.AddTrack(OceanMan) } Sleep, 20000 NewPlaylist.Delete() An alternative way to do this without getting any full track objects is the Spotify.Playlists.PlaylistAddTrack() method and the Spotify.Playlists.DeletePlaylist() method, which both a playlist ID and track ID, which would save us some web API calls. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"2yYSMsrFJ6m7ePtLxQZZBF\") loop, 3 { Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\") } Sleep, 20000 Spotify.Playlists.DeletePlaylist(NewPlaylist.ID)","title":"Example"},{"location":"rewrite-docs/playlists/get-playlist.html","text":"Getting A Playlist By ID Wraps around this Spotify API endpoint How to use Use Spotify.Playlists.GetPlaylist() to get a playlist by its Spotify ID . This will return a Playlist Object which can then be played/edited by the methods outlined on this page. Example This example will: A) Get the playlist Epic Gamer Music by Enrique Triana B) Try to play Epic Gamer Music on the active device EpicGamerMusic := Spotify.Playlists.GetPlaylist(\"2PJPSL6yYJA3ygxr5hADPw\") EpicGamerMusic.Play()","title":"Get A Playlist By ID"},{"location":"rewrite-docs/playlists/get-playlist.html#getting-a-playlist-by-id","text":"Wraps around this Spotify API endpoint","title":"Getting A Playlist By ID"},{"location":"rewrite-docs/playlists/get-playlist.html#how-to-use","text":"Use Spotify.Playlists.GetPlaylist() to get a playlist by its Spotify ID . This will return a Playlist Object which can then be played/edited by the methods outlined on this page.","title":"How to use"},{"location":"rewrite-docs/playlists/get-playlist.html#example","text":"This example will: A) Get the playlist Epic Gamer Music by Enrique Triana B) Try to play Epic Gamer Music on the active device EpicGamerMusic := Spotify.Playlists.GetPlaylist(\"2PJPSL6yYJA3ygxr5hADPw\") EpicGamerMusic.Play()","title":"Example"},{"location":"rewrite-docs/playlists/play.html","text":"Playing A Playlist Wraps around this Spotify API endpoint Warning This method requires Spotify Premium, and will NOT work without Spotify Premium (see here ) Note If an active device is not found, an error about the response status code not being 2xx will be thrown. How to use After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() (And adding tracks to the playlist), the .Play() method of the playlist object can be used. .Play() will start playing the playlist on the active device. Example A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play()","title":"Play A Playlist"},{"location":"rewrite-docs/playlists/play.html#playing-a-playlist","text":"Wraps around this Spotify API endpoint","title":"Playing A Playlist"},{"location":"rewrite-docs/playlists/play.html#warning","text":"","title":"Warning"},{"location":"rewrite-docs/playlists/play.html#this-method-requires-spotify-premium-and-will-not-work-without-spotify-premium-see-here","text":"","title":"This method requires Spotify Premium, and will NOT work without Spotify Premium (see here)"},{"location":"rewrite-docs/playlists/play.html#note","text":"If an active device is not found, an error about the response status code not being 2xx will be thrown.","title":"Note"},{"location":"rewrite-docs/playlists/play.html#how-to-use","text":"After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() (And adding tracks to the playlist), the .Play() method of the playlist object can be used. .Play() will start playing the playlist on the active device.","title":"How to use"},{"location":"rewrite-docs/playlists/play.html#example","text":"A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get a track object with Spotify.Tracks.GetTrack() and the track's Spotify ID C) Add a track to the new playlist with .AddTrack() , and the newly created track object D) Will try to play the new playlist on the active device NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 123\", false, \"This is an example playlist made by Spotify.ahk\") TheTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") NewPlaylist.AddTrack(TheTrack) NewPlaylist.Play()","title":"Example"},{"location":"rewrite-docs/playlists/playlist-object.html","text":"Playlist Objects Wrap around this Spotify API object model. Notes Playlist objects should only be created with Spotify.Playlists.GetPlaylist() / Spotify.Playlists.CreatePlaylist() unless they are returned by, or included in other objects. Playlist objects have the SpotifyAPIBaseClass base class, which provides many properties as pseudo properties. This will have little/no impact on functionality, but it is still recommended you read the SpotifyAPIBaseClass page to understand how this could impact your code. Properties Key Value description owner A User Object representing the owner of the playlist public If the playlist is public or not (true/false) tracks An array of Track Objects that are in the playlist Pseudo Properties Key Value description collaborative Returns true if context is not search and the owner allows other users to modify the playlist. Otherwise returns false. description The playlist description. Only returned for modified, verified playlists, otherwise null. external_urls Known external URLs for this playlist. followers Information about the followers of the playlist. href A link to the Web API endpoint providing full details of the playlist. id The Spotify ID for the playlist. images Array of images for the playlist. The array may be empty or contain up to three images. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day. name The name of the playlist. snapshot_id The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version. type The object type: \"playlist\". uri The Spotify URI for the playlist. Methods All methods for playlist objects call into the Spotify.Playlists class, which provides raw ID based functions for manipulating playlists. Definition Description AddTrack(TrackObject) Takes a Track Object and adds it to the playlist RemoveTrack(TrackObject) Takes a Track Object and removes it from the playlist Play() Plays the playlist on the currently active device Delete() Deletes the playlist","title":"Playlist Objects"},{"location":"rewrite-docs/playlists/playlist-object.html#playlist-objects","text":"Wrap around this Spotify API object model.","title":"Playlist Objects"},{"location":"rewrite-docs/playlists/playlist-object.html#notes","text":"Playlist objects should only be created with Spotify.Playlists.GetPlaylist() / Spotify.Playlists.CreatePlaylist() unless they are returned by, or included in other objects. Playlist objects have the SpotifyAPIBaseClass base class, which provides many properties as pseudo properties. This will have little/no impact on functionality, but it is still recommended you read the SpotifyAPIBaseClass page to understand how this could impact your code.","title":"Notes"},{"location":"rewrite-docs/playlists/playlist-object.html#properties","text":"Key Value description owner A User Object representing the owner of the playlist public If the playlist is public or not (true/false) tracks An array of Track Objects that are in the playlist","title":"Properties"},{"location":"rewrite-docs/playlists/playlist-object.html#pseudo-properties","text":"Key Value description collaborative Returns true if context is not search and the owner allows other users to modify the playlist. Otherwise returns false. description The playlist description. Only returned for modified, verified playlists, otherwise null. external_urls Known external URLs for this playlist. followers Information about the followers of the playlist. href A link to the Web API endpoint providing full details of the playlist. id The Spotify ID for the playlist. images Array of images for the playlist. The array may be empty or contain up to three images. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day. name The name of the playlist. snapshot_id The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version. type The object type: \"playlist\". uri The Spotify URI for the playlist.","title":"Pseudo Properties"},{"location":"rewrite-docs/playlists/playlist-object.html#methods","text":"All methods for playlist objects call into the Spotify.Playlists class, which provides raw ID based functions for manipulating playlists. Definition Description AddTrack(TrackObject) Takes a Track Object and adds it to the playlist RemoveTrack(TrackObject) Takes a Track Object and removes it from the playlist Play() Plays the playlist on the currently active device Delete() Deletes the playlist","title":"Methods"},{"location":"rewrite-docs/playlists/remove-tracks.html","text":"Removing Tracks From A Playlist Wraps around this Spotify API endpoint How to use After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() (And adding tracks to the playlist), the .RemoveTrack() method of the playlist object can be used. .RemoveTrack() expects one parameter, TrackID which must be a track object and removes all instances of the track from the playlist. To remove a track from a playlist by track ID, see the example at the bottom of the page. Example This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get 3 track objects with calls to Spotify.Tracks.GetTrack() . C) Add 5 tracks to the playlist, 3 copies of Ocean Man and the two other tracks, all using the .AddTrack() method . D) Wait for 10 seconds, then remove all copies of Ocean Man from the playlist NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") FirstTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") SecondTrack := Spotify.Tracks.GetTrack(\"2yYSMsrFJ6m7ePtLxQZZBF\") OceanMan := Spotify.Tracks.GetTrack(\"6M14BiCN00nOsba4JaYsHW\") NewPlaylist.AddTrack(FirstTrack) NewPlaylist.AddTrack(SecondTrack) loop, 3 { NewPlaylist.AddTrack(OceanMan) } Sleep, 10000 NewPlaylist.RemoveTrack(OceanMan) An alternative way to do this without getting full track objects is the Spotify.Playlists.PlaylistAddTrack() method and the Spotify.Playlists.PlaylistRemoveTrack() method, which both take a playlist ID and track ID, which would save us a few web API calls. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"2yYSMsrFJ6m7ePtLxQZZBF\") loop, 3 { Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\") } Sleep, 10000 Spotify.Playlists.PlaylistRemoveTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\")","title":"Remove Tracks From A Playlist"},{"location":"rewrite-docs/playlists/remove-tracks.html#removing-tracks-from-a-playlist","text":"Wraps around this Spotify API endpoint","title":"Removing Tracks From A Playlist"},{"location":"rewrite-docs/playlists/remove-tracks.html#how-to-use","text":"After getting a playlist through either Spotify.Playlists.GetPlaylist() or creating a new playlist with Spotify.Playlists.CreatePlaylist() (And adding tracks to the playlist), the .RemoveTrack() method of the playlist object can be used. .RemoveTrack() expects one parameter, TrackID which must be a track object and removes all instances of the track from the playlist. To remove a track from a playlist by track ID, see the example at the bottom of the page.","title":"How to use"},{"location":"rewrite-docs/playlists/remove-tracks.html#example","text":"This example will: A) Create a new (empty and private) playlist named Test 123 with the description This is an example playlist made by Spotify.ahk by calling Spotify.Playlists.CreatePlaylist() B) Get 3 track objects with calls to Spotify.Tracks.GetTrack() . C) Add 5 tracks to the playlist, 3 copies of Ocean Man and the two other tracks, all using the .AddTrack() method . D) Wait for 10 seconds, then remove all copies of Ocean Man from the playlist NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") FirstTrack := Spotify.Tracks.GetTrack(\"5ogtb9bGQoH8CjZNxmbNHR\") SecondTrack := Spotify.Tracks.GetTrack(\"2yYSMsrFJ6m7ePtLxQZZBF\") OceanMan := Spotify.Tracks.GetTrack(\"6M14BiCN00nOsba4JaYsHW\") NewPlaylist.AddTrack(FirstTrack) NewPlaylist.AddTrack(SecondTrack) loop, 3 { NewPlaylist.AddTrack(OceanMan) } Sleep, 10000 NewPlaylist.RemoveTrack(OceanMan) An alternative way to do this without getting full track objects is the Spotify.Playlists.PlaylistAddTrack() method and the Spotify.Playlists.PlaylistRemoveTrack() method, which both take a playlist ID and track ID, which would save us a few web API calls. NewPlaylist := Spotify.Playlists.CreatePlaylist(\"Test 1234\", false, \"This is a Spotify.ahk test playlist\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"5ogtb9bGQoH8CjZNxmbNHR\") Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"2yYSMsrFJ6m7ePtLxQZZBF\") loop, 3 { Spotify.Playlists.PlaylistAddTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\") } Sleep, 10000 Spotify.Playlists.PlaylistRemoveTrack(NewPlaylist.ID, \"6M14BiCN00nOsba4JaYsHW\")","title":"Example"},{"location":"rewrite-docs/playlists/static-playlists.html","text":"The Spotify.Playlists static class Does not wrap around any specific API object/endpoint. Instead, the Spotify.Playlists class provides methods that accept raw Spotify IDs and call their web API versions. Note This class is 100% static, and new Spotify.Playlists() will never be valid, and is very likely to break things. Methods Method Name Parameters Return value Description GetPlaylist PlaylistID A full Spotify.Playlist object for the given playlist. N/A PlaylistGetTrackCount PlaylistID The number of tracks in the given playlist. N/A PlaylistAddTrack PlaylistID , TrackID None Tries to add the track with the given ID to the given playlist. PlaylistRemoveTrack PlaylistID , TrackID None Tries to remove the track with the given ID from the given playlist. DeletePlaylist PlaylistID None Tries to delete the given playlist CreatePlaylist PlaylistName , Public , Description A new (empty) Spotify.Playlist object Creates a new playlist for the logged in user and returns it.","title":"The `Spotify.Playlists` static class"},{"location":"rewrite-docs/playlists/static-playlists.html#the-spotifyplaylists-static-class","text":"Does not wrap around any specific API object/endpoint. Instead, the Spotify.Playlists class provides methods that accept raw Spotify IDs and call their web API versions.","title":"The Spotify.Playlists static class"},{"location":"rewrite-docs/playlists/static-playlists.html#note","text":"This class is 100% static, and new Spotify.Playlists() will never be valid, and is very likely to break things.","title":"Note"},{"location":"rewrite-docs/playlists/static-playlists.html#methods","text":"Method Name Parameters Return value Description GetPlaylist PlaylistID A full Spotify.Playlist object for the given playlist. N/A PlaylistGetTrackCount PlaylistID The number of tracks in the given playlist. N/A PlaylistAddTrack PlaylistID , TrackID None Tries to add the track with the given ID to the given playlist. PlaylistRemoveTrack PlaylistID , TrackID None Tries to remove the track with the given ID from the given playlist. DeletePlaylist PlaylistID None Tries to delete the given playlist CreatePlaylist PlaylistName , Public , Description A new (empty) Spotify.Playlist object Creates a new playlist for the logged in user and returns it.","title":"Methods"},{"location":"rewrite-docs/search/chain.html","text":"Search Chains Note This is a made up term, I just picked it because I wrote the search functions so they can be chained in a pretty way. Info Result := Spotify.Search.For(TYPES).By(KEYWORD [, CRITERIA]) is the basic structure of these searches, and the chained search functions like above return a Spotify.Search.SearchResult object . The .For() function takes a list of types to return, stores them in an object, sets the key By on the object to Spotify.Search._By , and returns the object This allows for us to chain .For().By() in a nice way, which is also why I call this a chain. It also reminds me of jQuery's return this thing, which I like much more than I like jQuery. .By() takes a plain query as text for the first parameter, and optional pairs of query criteria keys/values as the second. Examples This example will search for the track Homebound by DROELOE and play the first found track result Result := Spotify.Search.For(\"tracks\").By(\"Homebound\", {\"artist\": \"DROELOE\"}) Result.Tracks[1].Play() The criteria {\"artist\": \"DROELOE\"} limits the search to where Artist.Name ~= \"DROELOE\" , and \"Homebound\" limits the search to results Anything.Name ~= \"Homebound\" An important thing to remember is that you will only get results of the types you specify, so if you don't get any search results for some query, make sure you are searching for the right types Another example: Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\") MsgBox, % Result.Tracks[1].Name \"`n\" Result.Albums[1].Name \"`n\" Result.Playlists[1].Name To pass a limit/offset for the search, pass it as a standard criteria, like: Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\", {\"limit\": 10, \"offset\": 5}) To include a NOT in your search, pass it like Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\", {\"artist\": \" NOT Whoever\"})","title":"Search Chains"},{"location":"rewrite-docs/search/chain.html#search-chains","text":"","title":"Search Chains"},{"location":"rewrite-docs/search/chain.html#note","text":"This is a made up term, I just picked it because I wrote the search functions so they can be chained in a pretty way.","title":"Note"},{"location":"rewrite-docs/search/chain.html#info","text":"Result := Spotify.Search.For(TYPES).By(KEYWORD [, CRITERIA]) is the basic structure of these searches, and the chained search functions like above return a Spotify.Search.SearchResult object . The .For() function takes a list of types to return, stores them in an object, sets the key By on the object to Spotify.Search._By , and returns the object This allows for us to chain .For().By() in a nice way, which is also why I call this a chain. It also reminds me of jQuery's return this thing, which I like much more than I like jQuery. .By() takes a plain query as text for the first parameter, and optional pairs of query criteria keys/values as the second.","title":"Info"},{"location":"rewrite-docs/search/chain.html#examples","text":"This example will search for the track Homebound by DROELOE and play the first found track result Result := Spotify.Search.For(\"tracks\").By(\"Homebound\", {\"artist\": \"DROELOE\"}) Result.Tracks[1].Play() The criteria {\"artist\": \"DROELOE\"} limits the search to where Artist.Name ~= \"DROELOE\" , and \"Homebound\" limits the search to results Anything.Name ~= \"Homebound\" An important thing to remember is that you will only get results of the types you specify, so if you don't get any search results for some query, make sure you are searching for the right types Another example: Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\") MsgBox, % Result.Tracks[1].Name \"`n\" Result.Albums[1].Name \"`n\" Result.Playlists[1].Name To pass a limit/offset for the search, pass it as a standard criteria, like: Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\", {\"limit\": 10, \"offset\": 5}) To include a NOT in your search, pass it like Result := Spotify.Search.For(\"tracks\", \"albums\", \"playlists\").By(\"Gamer\", {\"artist\": \" NOT Whoever\"})","title":"Examples"},{"location":"rewrite-docs/search/for.html","text":"Searching Spotify For Things This class wraps around this Spotify API endpoint Note This class is 100% static, new Spotify.Search() is not how to start a search. How to use See this page The Spotify.Search class provides the following methods: Name Parameters Return Value Description For Types* A object that .By() can be called on to build a search in a more verbose way N/A Search QueryString a Spotify.Search.SearchResult object containing the results of the search Takes a Spotify Query String and returns the result of the search And the following property Name Value Description SearchResult An object base class This class seperates the artists/tracks/albums/playlists returned by a search, and the original search string","title":"Searching Spotify For Things"},{"location":"rewrite-docs/search/for.html#searching-spotify-for-things","text":"This class wraps around this Spotify API endpoint","title":"Searching Spotify For Things"},{"location":"rewrite-docs/search/for.html#note","text":"This class is 100% static, new Spotify.Search() is not how to start a search.","title":"Note"},{"location":"rewrite-docs/search/for.html#how-to-use","text":"See this page The Spotify.Search class provides the following methods: Name Parameters Return Value Description For Types* A object that .By() can be called on to build a search in a more verbose way N/A Search QueryString a Spotify.Search.SearchResult object containing the results of the search Takes a Spotify Query String and returns the result of the search And the following property Name Value Description SearchResult An object base class This class seperates the artists/tracks/albums/playlists returned by a search, and the original search string","title":"How to use"},{"location":"rewrite-docs/tracks/get-track.html","text":"Getting A Track By ID Wraps around this Spotify API endpoint How to use Spotifys.Tracks.GetTrack() will get a track object by its Spotify ID . Returns a Track Object which can then be used for the methods outlined on this page. Example This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID C) Save the track with the .Save() method . GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save()","title":"Get A Track By ID"},{"location":"rewrite-docs/tracks/get-track.html#getting-a-track-by-id","text":"Wraps around this Spotify API endpoint","title":"Getting A Track By ID"},{"location":"rewrite-docs/tracks/get-track.html#how-to-use","text":"Spotifys.Tracks.GetTrack() will get a track object by its Spotify ID . Returns a Track Object which can then be used for the methods outlined on this page.","title":"How to use"},{"location":"rewrite-docs/tracks/get-track.html#example","text":"This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID C) Save the track with the .Save() method . GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save()","title":"Example"},{"location":"rewrite-docs/tracks/issaved-track.html","text":"Getting If A Track Is Saved Wraps around this Spotify API endpoint How to use After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .IsSaved() method of the track object can be used. .IsSaved() expects no parameters and will return if a track is saved to the current user's Your Music library. Example This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID B) Check if the track is saved with the .IsSaved() method. GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") MsgBox, % GoodSongIMO.Name \" saved = \" GoodSongIMO.IsSaved() An alternative way to do this without getting the full track object is the Spotify.Library.TrackIsSaved() method, which takes a track ID, and would tell us if it is saved in a single API call. Spotify.Library.TrackIsSaved(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Getting If A Track Is Saved"},{"location":"rewrite-docs/tracks/issaved-track.html#getting-if-a-track-is-saved","text":"Wraps around this Spotify API endpoint","title":"Getting If A Track Is Saved"},{"location":"rewrite-docs/tracks/issaved-track.html#how-to-use","text":"After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .IsSaved() method of the track object can be used. .IsSaved() expects no parameters and will return if a track is saved to the current user's Your Music library.","title":"How to use"},{"location":"rewrite-docs/tracks/issaved-track.html#example","text":"This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID B) Check if the track is saved with the .IsSaved() method. GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") MsgBox, % GoodSongIMO.Name \" saved = \" GoodSongIMO.IsSaved() An alternative way to do this without getting the full track object is the Spotify.Library.TrackIsSaved() method, which takes a track ID, and would tell us if it is saved in a single API call. Spotify.Library.TrackIsSaved(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Example"},{"location":"rewrite-docs/tracks/play-track.html","text":"Playing A Track Wraps around this Spotify API endpoint Warning This method requires Spotify Premium, and will NOT work without Spotify Premium (see here ) Note If an active device is not found, an error about the response status code not being 2xx will be thrown. How to use After getting a track object through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .Play() method of the track object can be used. .Play() will start playing the track on the active device. Example This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID . C) Play the track GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Play() An alternative way to do this without getting the full track object is the Spotify.Player.PlayTrack() method, which takes a track ID, and would save us a single web API call to get the track. Spotify.Player.PlayTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Play A Track"},{"location":"rewrite-docs/tracks/play-track.html#playing-a-track","text":"Wraps around this Spotify API endpoint","title":"Playing A Track"},{"location":"rewrite-docs/tracks/play-track.html#warning","text":"","title":"Warning"},{"location":"rewrite-docs/tracks/play-track.html#this-method-requires-spotify-premium-and-will-not-work-without-spotify-premium-see-here","text":"","title":"This method requires Spotify Premium, and will NOT work without Spotify Premium (see here)"},{"location":"rewrite-docs/tracks/play-track.html#note","text":"If an active device is not found, an error about the response status code not being 2xx will be thrown.","title":"Note"},{"location":"rewrite-docs/tracks/play-track.html#how-to-use","text":"After getting a track object through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .Play() method of the track object can be used. .Play() will start playing the track on the active device.","title":"How to use"},{"location":"rewrite-docs/tracks/play-track.html#example","text":"This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID . C) Play the track GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Play() An alternative way to do this without getting the full track object is the Spotify.Player.PlayTrack() method, which takes a track ID, and would save us a single web API call to get the track. Spotify.Player.PlayTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Example"},{"location":"rewrite-docs/tracks/save-track.html","text":"Saving A Track Wraps around this Spotify API endpoint Note If you have more that 10,000 tracks saved, this will fail with an HTTP status code of 403 How to use After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .Save() method of the track object can be used. .Save() expects no parameters and will save a track to the current user's Your Music library. Example This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID B) Save the track with the .Save() method. Spoofy := new Spotify() GoodSongIMO := Spoofy.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save() An alternative way to do this without getting the full track object is the Spotify.Library.SaveTrack() method, which takes a track ID, and would save the track in a single web API call. Spotify.Library.SaveTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Save A Track"},{"location":"rewrite-docs/tracks/save-track.html#saving-a-track","text":"Wraps around this Spotify API endpoint","title":"Saving A Track"},{"location":"rewrite-docs/tracks/save-track.html#note","text":"If you have more that 10,000 tracks saved, this will fail with an HTTP status code of 403","title":"Note"},{"location":"rewrite-docs/tracks/save-track.html#how-to-use","text":"After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .Save() method of the track object can be used. .Save() expects no parameters and will save a track to the current user's Your Music library.","title":"How to use"},{"location":"rewrite-docs/tracks/save-track.html#example","text":"This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID B) Save the track with the .Save() method. Spoofy := new Spotify() GoodSongIMO := Spoofy.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save() An alternative way to do this without getting the full track object is the Spotify.Library.SaveTrack() method, which takes a track ID, and would save the track in a single web API call. Spotify.Library.SaveTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Example"},{"location":"rewrite-docs/tracks/static-tracks.html","text":"The Spotify.Tracks static class Does not wrap around any specific API object/endpoint. Instead, the Spotify.Tracks class provides methods that accept raw Spotify IDs and call their web API versions. Note This class is 100% static, and new Spotify.Tracks() will never be valid, and is very likely to break things. Methods Method Name Parameters Return value Description GetTrack TrackID A full Spotify.Track object for the given track ID. N/A You might notice this class is lacking some methods, this is because everything related to saving tracks is located in the Spotify.Library class.","title":"The `Spotify.Tracks` static class"},{"location":"rewrite-docs/tracks/static-tracks.html#the-spotifytracks-static-class","text":"Does not wrap around any specific API object/endpoint. Instead, the Spotify.Tracks class provides methods that accept raw Spotify IDs and call their web API versions.","title":"The Spotify.Tracks static class"},{"location":"rewrite-docs/tracks/static-tracks.html#note","text":"This class is 100% static, and new Spotify.Tracks() will never be valid, and is very likely to break things.","title":"Note"},{"location":"rewrite-docs/tracks/static-tracks.html#methods","text":"Method Name Parameters Return value Description GetTrack TrackID A full Spotify.Track object for the given track ID. N/A You might notice this class is lacking some methods, this is because everything related to saving tracks is located in the Spotify.Library class.","title":"Methods"},{"location":"rewrite-docs/tracks/track-object.html","text":"Track Objects Wrap around this Spotify API object model. Note Track objects should only be created with .Tracks.GetTrack() unless they are returned by, or included in other objects. Track objects have the SpotifyAPIBaseClass base class, which provides many properties as pseudo properties. This will have little/no impact on functionality, but it is still recommended you read the SpotifyAPIBaseClass page to understand how this could impact your code. Properties Key Value description album An Album Object of the album the track is from artists An array of Artist Objects that represents the Artist(s) of the track Methods Definition Description .IsSaved() Checks if the track is saved to the user's Your Music library .Save() Saves a track to the current user's Your Music library .UnSave() Removes a saved track from the current user's Your Music library .Play() Tries to start playing the track on the active device, will cancel any other playback","title":"Track Objects"},{"location":"rewrite-docs/tracks/track-object.html#track-objects","text":"Wrap around this Spotify API object model.","title":"Track Objects"},{"location":"rewrite-docs/tracks/track-object.html#note","text":"Track objects should only be created with .Tracks.GetTrack() unless they are returned by, or included in other objects. Track objects have the SpotifyAPIBaseClass base class, which provides many properties as pseudo properties. This will have little/no impact on functionality, but it is still recommended you read the SpotifyAPIBaseClass page to understand how this could impact your code.","title":"Note"},{"location":"rewrite-docs/tracks/track-object.html#properties","text":"Key Value description album An Album Object of the album the track is from artists An array of Artist Objects that represents the Artist(s) of the track","title":"Properties"},{"location":"rewrite-docs/tracks/track-object.html#methods","text":"Definition Description .IsSaved() Checks if the track is saved to the user's Your Music library .Save() Saves a track to the current user's Your Music library .UnSave() Removes a saved track from the current user's Your Music library .Play() Tries to start playing the track on the active device, will cancel any other playback","title":"Methods"},{"location":"rewrite-docs/tracks/unsave-track.html","text":"Un-Saving A Track Wraps around this Spotify API endpoint How to use After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .UnSave() method of the track object can be used. .UnSave() expects no parameters and will remove a track from the current user's Your Music library. Example This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID C) Save the track with .Save() D) Wait 20 seconds, then un-save the track with .UnSave() GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save() Sleep, 20000 GoodSongIMO.UnSave() An alternative way to do this without getting the full track object is the Spotify.Library.UnSaveTrack() method, which takes a track ID, and would unsave the track in a single web API call. Spotify.Library.UnSaveTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Un-Save A Track"},{"location":"rewrite-docs/tracks/unsave-track.html#un-saving-a-track","text":"Wraps around this Spotify API endpoint","title":"Un-Saving A Track"},{"location":"rewrite-docs/tracks/unsave-track.html#how-to-use","text":"After getting a track through either Spotify.Tracks.GetTrack() or any other function/object which contains/returns track objects, the .UnSave() method of the track object can be used. .UnSave() expects no parameters and will remove a track from the current user's Your Music library.","title":"How to use"},{"location":"rewrite-docs/tracks/unsave-track.html#example","text":"This example will: A) Get a track with Spotify.Tracks.GetTrack() by the track's Spotify ID C) Save the track with .Save() D) Wait 20 seconds, then un-save the track with .UnSave() GoodSongIMO := Spotify.Tracks.GetTrack(\"4A6eJ3gOmVdD7C69N3DC7K\") GoodSongIMO.Save() Sleep, 20000 GoodSongIMO.UnSave() An alternative way to do this without getting the full track object is the Spotify.Library.UnSaveTrack() method, which takes a track ID, and would unsave the track in a single web API call. Spotify.Library.UnSaveTrack(\"4A6eJ3gOmVdD7C69N3DC7K\")","title":"Example"}]}